bee-creative.util - [cc-by] Sebastian Rostock
Dieses Werk ist unter einem Creative Commons Namensnennung 3.0 Deutschland Lizenzvertrag lizenziert. Um die Lizenz anzusehen, gehen Sie bitte zu:  [ http://creativecommons.org/licenses/by/3.0/de/ ] oder schicken Sie einen Brief an:  [ Creative Commons, 171 Second Street, Suite 300, San Francisco, California 94105, USA. ]

Diese Bibliothek beinhaltet mehrere Hilfsklassen und Hilfsmethoden zur Realisirung verschiedener Algebren auf Filtern, Iteratoren und Convertern im Zusammenhang mit anderen Schnittstellen. 


Filters {
	classes {
		InverseFilter
		ConvertedFilter
		DisjunctionFilter
		ConjunctionFilter
		EquivalenceFilter
		SynchronizedFilter
	}
	methods {
		nullFilter()
		inverseFilter(Filter)
		defaultFilter(boolean)
		convertedFilter(Filter, Converter)
		disjunctionFilter(Filter, Filter)
		conjunctionFilter(Filter, Filter)
		equivalenceFilter(Filter, Filter)
		synchronizedFilter(Filter)
	}
}

Iterators {
	classes {
		EntryIterator
		LimitedIterator
		FilteredIterator
		ChainedIterator
		ConvertedIterator
	}
	methods {
		skip(Iterator, int)
		appendAll(Iterator, Collection)
		removeAll(Iterator, Collection)
		iterator(Iterator)
		iteratorConverter()
		voidIterator()
		entryIterator(GEntry)
		entryIteratorConverter()
		limitedIterator(Filter, Iterator)
		limitedIteratorConverter(Filter)
		filteredIterator(Filter, Iterator)
		filteredIteratorConverter(Filter)
		chainedIterator(Iterator...)
		chainedIterator(Iterator, Iterator)
		chainedIterator(Iterator>)
		chainedIterator(Iterable>)
		chainedIteratorConverter()
		convertedIterator(Converter, Iterator)
		convertedIteratorConverter(Converter)
	}
}

Iterables {
	classes {
		EntryIterable
		LimitedIterable
		FilteredIterable
		ChainedIterable
		ConvertedIterable
	}
	methods {
		appendAll(Iterable, Collection)
		removeAll(Iterable, Collection)
		iterable(Iterable)
		iterableConverter()
		iterableIteratorConverter()
		voidIterable()
		entryIterable(GEntry)
		entryIteratorConverter()
		limitedIterable(Filter, Iterable)
		limitedIterableConverter(Filter)
		filteredIterable(Filter, Iterable)
		filteredIterableConverter(Filter)
		chainedIterable(Iterable)
		chainedIterableConverter()
		convertedIterable(Converter, Iterable)
		convertedIterableConverter(Converter)
	}
}

Comparators {
	classes {
		NullComparator
		ReverseComparator
		IterableComparator
		ChainedComparator
		ConvertedComparator
	}
	methods {
		nullComparator(Comparator)
		naturalComparator()
		reverseComparator(Comparator)
		iterableComparator(Comparator)
		chainedComparator(Comparator, Comparator)
		convertedComparator(Converter, Comparator)
		stringNumericalComparator()
		stringAlphabeticalComparator()
		stringAlphanumericalComparator()
		numberLongComparator()
		numberFloatComparator()
		numberIntegerComparator()
		numberDoubleComparator()
	}
}

Comparables {
	classes {
		NullComparable
		ReverseComparable
		ChainedComparable
		ConvertedComparable
	}
	methods {
		nullComparable(Comparable)
		reverseComparable(Comparable)
		chainedComparable(Comparable, Comparable)
		convertedComparable(Converter, Comparable)
		binarySearch(List, Comparable, int, int)
		binarySearchFirst(List, Comparable, int, int)
		binarySearchLast(List, Comparable, int, int)
	}
}

Strings {
	methods {
		join(String, Iterable)
		joinConverter(String)
		split(Pattern, CharSequence, int)
		splitConverter(Pattern, int)
		splitAll(Pattern, CharSequence)
		splitAllConverter(Pattern)
		match(Pattern, CharSequence, int)
		matchConverter(Pattern, int)
		matchAll(Pattern, CharSequence)
		matchAllConverter(Pattern)
		splatch(Pattern, CharSequence, int)
		splatchConverter(Pattern, int)
		splatchAll(Pattern, CharSequence)
		splatchAllConverter(Pattern)
		patternConverter(int)
	}
}

Objects {
	classes {
		UseToString
	}
	methods {
		hash(Object...)
		equals(Object...)
		toString(boolean, Object)
		toStringCall(boolean, boolean, String, Object...)
		toStringObject(boolean, Object)
		toStringConverter(boolean)
	}
}


Converters {
	classes {
		FixedFieldConverter
		FixedMethodConverter
		NamedFieldConverter
		NamedMethodConverter
		DefaultConverter
		FilteredConverter
		CachedConverter
		ChainedConverter
		SynchronizedConverter
	}
	methods {
		voidConverter()
		fieldConverter(String)
		fieldConverter(Field)
		methodConverter(String)
		methodConverter(Method)
		defaultConverter(Object)
		cachedConverter(int, int, int, Converter)
		chainedConverter(Converter, Converter)
		filteredConverter(Filter, Converter, Converter)
		synchronizedConverter(Converter)
	}
}

Conversions {
	classes {
		StaticConversion
		InverseConversion
		DynamicConversion
	}
	methods {
		staticConversion(Object, Object)
		staticConversionConverter(Converter)
		inverseConversion(Conversion)
		inverseConversionConverter()
		dynamicConversion(Object, Converter)
		dynamicConversionConverter(Converter)
		conversionInputConverter()
		conversionOutputConverter()
	}
}

Builders {
	classes {
		CachedBuilder
		ConvertedBuilder
		SynchronizedBuilder
	}
	methods {
		nullBuilder()
		cachedBuilder(int, Builder)
		convertedBuilder(Converter, Builder)
		synchronizedBuilder(Builder)
	}
}

Pointers {
	classes {
		HardPointer
		WeakPointer
		SoftPointer
		ConvertedPointer
	}
	methods {
		valid(Pointer)
		pointer(Pointer)
		pointer(int, Object)
		pointerConverter(int)
		pointerDataConverter()
		nullPointer()
		hardPointer(Object)
		hardPointerConverter()
		weakPointer(Object)
		weakPointerConverter()
		softPointer(Object)
		softPointerConverter()
		convertedPointer(Converter, Pointer)
	}
}

Hash {
}

Tester {
}

Compact {
	classes {
		CompactData
		CompactSet
		CompactHashSet
		CompactNavigableSet
		CompactMap
		CompactItemMap
		CompactItemHashMap
		CompactEntryMap
		CompactEntryHashMap
		CompactNavigableMap
		CompactNavigableItemMap
		CompactNavigableEntryMap
	}
}
